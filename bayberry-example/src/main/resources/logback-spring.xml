<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">

    <!-- 定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
    <statusListener class="ch.qos.logback.core.status.NopStatusListener" />
    <!-- 获取application-xxx.yaml 中得值，由于logback-spring.xml加载早于application.yaml，故需要通过springProperty -->
    <springProperty scope="context" name="contextName" source="spring.application.name"/>
    <springProperty scope="context" name="logPath" source="magic.logger.log-path"/>
    <springProperty scope="context" name="loglevel" source="magic.logger.level"/>

    <!-- 区分不同应用程序的记录，默认为default -->
    <contextName>${contextName}</contextName>

    <!-- 定义日志文件的存储地址 windows 默认为开发环境, linux 为生产环境 -->
    <if condition='p("os.name").contains("Windows")'>
        <then>
            <property name="LOG_PATH" value="c:/${logPath}" />
        </then>
        <else>
            <property name="LOG_PATH" value="${logPath}" />
        </else>
    </if>

    <!-- 日志最大的历史 7天 -->
    <property name="maxHistory" value="7" />
	<!-- 日志最大文件大小 20M -->
	<property name="maxFileSize" value="20MB" />
	<!-- 日志归档总文件大小 5G-->
	<property name="totalSizeCap" value="5GB"/>

    <!-- console appender -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="cn.zerry.baberry.core.config.PatternLogbackLayout">
                <!-- [05-24 16:35:43] [DEBUG] [执行完毕SQL:(30ms) select count(t.*) from t(xxx::1=1 )] [PerformanceInterceptor.intercept.76] -->
                <pattern>[%cyan(%-17track_key)] %d{MM/dd/yyyy HH:mm:ss} %highlight(%-5level) - %msg %magenta([%logger{0}.%M.%L]) \n</pattern>
            </layout>
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <!-- debug appender -->
    <appender name="DEBUGLEVEL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件文件名及保存路径 -->
        <file>${LOG_PATH}/debug.log</file>

        <!-- 日志记录器的滚动策略，按日期记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件归档，%d{yyyy-MM-dd}为日期格式，存放目录进一步分类，并且每个文件最大为maxFileSize，超过时，自动切割文件 -->
            <fileNamePattern>${LOG_PATH}/debug/debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--日志保留时间-->
            <maxHistory>${maxHistory}</maxHistory>
            <!-- 日志达到一定大小后自动分割 -->
            <maxFileSize>${maxFileSize}</maxFileSize>
            <!-- 日志归档总文件大小-->
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <!-- 以追加的方式追加日志 -->
        <append>true</append>
        <!-- 日志格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{MM/dd/yyyy HH:mm:ss} %highlight(%-5level) - %msg %magenta([%logger{0}.%M.%L]) \n</pattern>
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <!-- info appender -->
    <appender name="INFOLEVEL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件文件名及保存路径 -->
        <file>${LOG_PATH}/info.log</file>
        <!-- 日志记录器的滚动策略，按日期记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件归档，%d{yyyy-MM-dd}为日期格式，存放目录进一步分类 -->
            <fileNamePattern>${LOG_PATH}/info/info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--日志保留时间-->
            <maxHistory>${maxHistory}</maxHistory>
            <!-- 日志达到一定大小后自动分割 -->
            <maxFileSize>${maxFileSize}</maxFileSize>
            <!-- 日志归档总文件大小-->
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <!-- 以追加的方式追加日志 -->
        <append>true</append>
        <!-- 日志格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{MM/dd/yyyy HH:mm:ss} %highlight(%-5level) - %msg %magenta([%logger{0}.%M.%L]) \n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!-- 临界值过滤器，过滤掉低于指定临界值的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
        </filter>
    </appender>

    <!-- error appender -->
    <appender name="ERRORLEVEL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件文件名及保存路径 -->
        <file>${LOG_PATH}/error.log</file>
        <!-- 日志记录器的滚动策略，按日期记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件归档，%d{yyyy-MM-dd}为日期格式，存放目录进一步分类 -->
            <fileNamePattern>${LOG_PATH}/error/error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--日志保留时间-->
            <maxHistory>${maxHistory}</maxHistory>
            <!-- 日志达到一定大小后自动分割 -->
            <maxFileSize>${maxFileSize}</maxFileSize>
            <!-- 日志归档总文件大小-->
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <!-- 以追加的方式追加日志 -->
        <append>true</append>
        <!-- 日志格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{MM/dd/yyyy HH:mm:ss} %highlight(%-5level) - %msg %magenta([%logger{0}.%M.%L]) \n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!-- 临界值过滤器，过滤掉低于指定临界值的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>error</level>
        </filter>
    </appender>

    <logger name="org.springframework" level="WARN"/>
    <logger name="org.apache.ibatis" level="ERROR"/>
    <logger name="org.mybatis.spring" level="ERROR"/>
    <logger name="net.sf.ehcache" level="ERROR"/>
    <logger name="org.quartz.core" level="ERROR"/>
    <logger name="org.apache.catalina" level="ERROR"/>
    <logger name="org.apache.http.headers" level="ERROR" />

    <logger name="java.sql.Connection" level="ERROR" />
    <logger name="java.sql.Statement" level="ERROR" />
    <logger name="java.sql.PreparedStatement" level="ERROR" />
    <logger name="java.sql.ResultSet" level="ERROR" />

    <logger name="druid.sql" level="WARN"/>
    <logger name="druid.sql.DataSource" level="WARN"/>
    <logger name="druid.sql.Connection" level="WARN"/>
    <logger name="druid.sql.Statement" level="WARN"/>
    <logger name="druid.sql.PreparedStatement" level="WARN"/>
    <logger name="druid.sql.ResultSet" level="WARN"/>
    <logger name="com.alibaba.druid.pool.PreparedStatementPool" level="WARN"/>

    <logger name="com.baomidou.dynamic.datasource" level="ERROR"/>
    <logger name="com.baomidou.dynamic.datasource.DynamicRoutingDataSource" level="INFO"/>
    <logger name="com.baomidou.mybatisplus.core" level="ERROR" />
    <logger name="org.apache.http.wire" level="ERROR" />
    <logger name="org.hibernate.validator" level="INFO" />

    <!-- 控制台打印资源加载信息 -->
    <root level="${loglevel}">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="DEBUGLEVEL" />
        <appender-ref ref="ERRORLEVEL" />
    </root>
</configuration>
